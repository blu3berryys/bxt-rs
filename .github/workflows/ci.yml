name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Monthly

env:
  RUN_SLOW_TESTS: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-latest]
        rust: [stable, beta]
        configuration: [debug, release]
        cross: [false, true]
        exclude:
          - configuration: release
            rust: beta
          - cross: true
            os: windows-latest
        include:
          - os: ubuntu-24.04
            cross: false
            label: Ubuntu
            target: i686-unknown-linux-gnu
            filename: libbxt_rs.so
          - os: ubuntu-24.04
            cross: true
            label: Debian (cross to Windows)
            target: i686-pc-windows-gnu
            filename: bxt_rs.dll
            cross-dep: gcc-mingw-w64-i686
            container: rust:latest
          - os: windows-latest
            label: Windows
            target: i686-pc-windows-msvc
            filename: bxt_rs.dll
          - configuration: release
            release-flag: '--release'

    name: ${{ matrix.rust }} - ${{ matrix.label }} - ${{ matrix.configuration }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          show-progress: false

      - if: job.container
        run: chown -R $(id -u):$(id -g) .

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Install sudo
        if: job.container
        run: |
          apt-get update -y
          apt-get install sudo -y

      - name: Install dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libc6-dev-i386 ${{ matrix.cross-dep }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.configuration }}-${{ matrix.cross }}

      - name: Build
        run: cargo build --target ${{ matrix.target }} ${{ matrix.release-flag }}

      - name: Build tests
        if: !matrix.cross
        run: cargo test --no-run --all --target ${{ matrix.target }} ${{ matrix.release-flag }}

      - name: Test
        if: !matrix.cross
        run: cargo test --all --target ${{ matrix.target }} ${{ matrix.release-flag }} -- --nocapture

      - uses: actions/upload-artifact@v4
        if: matrix.rust == 'stable' && !matrix.cross
        with:
          name: bxt-rs-${{ runner.os }}-${{ matrix.configuration }}
          path: target/${{ matrix.target }}/${{ matrix.configuration }}/${{ matrix.filename }}
          if-no-files-found: error

      - name: Prepare release
        if: startsWith(github.ref, 'refs/tags/') && matrix.rust == 'stable' && matrix.configuration == 'release' && !matrix.cross
        run: |
          cp target/${{ matrix.target }}/${{ matrix.configuration }}/${{ matrix.filename }} ${{ matrix.filename }}
          7z a bxt-rs-${{ runner.os }}.7z ${{ matrix.filename }} COPYING

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.rust == 'stable' && matrix.configuration == 'release' && !matrix.cross
        uses: softprops/action-gh-release@v2
        with:
          files: bxt-rs-${{ runner.os }}.7z
          draft: true
          fail_on_unmatched_files: true

      - name: Generate wiki
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-24.04' && matrix.rust == 'stable' && matrix.configuration == 'release' && !matrix.cross
        run: |
          mkdir temp_wiki_output
          cargo run --target ${{ matrix.target }} --release --bin gen-wiki > temp_wiki_output/Features.md

      - name: Upload wiki artifact
        uses: actions/upload-artifact@v4
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-24.04' && matrix.rust == 'stable' && matrix.configuration == 'release' && !matrix.cross
        with:
          name: wiki
          path: temp_wiki_output/

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            label: Ubuntu
            target: i686-unknown-linux-gnu
          - os: windows-latest
            label: Windows
            target: i686-pc-windows-msvc

    name: Clippy - ${{ matrix.label }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install libc6-dev-i386

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.target }}

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --all --all-targets --target ${{ matrix.target }}

  rustfmt:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  publish-wiki:
    name: Publish Wiki
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build, clippy, rustfmt]
    runs-on: ubuntu-24.04

    steps:
      - name: Download wiki artifact
        uses: actions/download-artifact@v4
        with:
          name: wiki
          path: temp_wiki_output/

      - name: List files
        run: ls --recursive temp_wiki_output/

      - name: Publish wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: temp_wiki_output/
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
